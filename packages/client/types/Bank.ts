/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BankInterface extends utils.Interface {
  functions: {
    "DISCOUNT_RATE()": FunctionFragment;
    "INTEREST_RATE()": FunctionFragment;
    "TERM()": FunctionFragment;
    "allBills(uint256)": FunctionFragment;
    "beforeDueDate(uint256)": FunctionFragment;
    "cashBill(uint256)": FunctionFragment;
    "completeBill(uint256)": FunctionFragment;
    "dishonoredAddresses(uint256)": FunctionFragment;
    "getAmountToCashBill(uint256)": FunctionFragment;
    "getAmountToPayBill(uint256)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getNumberOfBills()": FunctionFragment;
    "getNumberOfDishonoredAddresses()": FunctionFragment;
    "issueBill(uint256,address)": FunctionFragment;
    "lockToken(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DISCOUNT_RATE"
      | "INTEREST_RATE"
      | "TERM"
      | "allBills"
      | "beforeDueDate"
      | "cashBill"
      | "completeBill"
      | "dishonoredAddresses"
      | "getAmountToCashBill"
      | "getAmountToPayBill"
      | "getBalance"
      | "getNumberOfBills"
      | "getNumberOfDishonoredAddresses"
      | "issueBill"
      | "lockToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DISCOUNT_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INTEREST_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TERM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allBills",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeDueDate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cashBill",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "completeBill",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dishonoredAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountToCashBill",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountToPayBill",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfBills",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfDishonoredAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issueBill",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DISCOUNT_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INTEREST_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TERM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allBills", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beforeDueDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cashBill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeBill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dishonoredAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountToCashBill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountToPayBill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfBills",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfDishonoredAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issueBill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockToken", data: BytesLike): Result;

  events: {};
}

export interface Bank extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BankInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DISCOUNT_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    INTEREST_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    TERM(overrides?: CallOverrides): Promise<[BigNumber]>;

    allBills(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, number] & {
        id: BigNumber;
        amount: BigNumber;
        timestamp: BigNumber;
        issuer: string;
        recipient: string;
        status: number;
      }
    >;

    beforeDueDate(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cashBill(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeBill(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dishonoredAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAmountToCashBill(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmountToPayBill(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNumberOfBills(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNumberOfDishonoredAddresses(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    issueBill(
      _amount: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lockToken(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DISCOUNT_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  INTEREST_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  TERM(overrides?: CallOverrides): Promise<BigNumber>;

  allBills(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, string, number] & {
      id: BigNumber;
      amount: BigNumber;
      timestamp: BigNumber;
      issuer: string;
      recipient: string;
      status: number;
    }
  >;

  beforeDueDate(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cashBill(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeBill(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dishonoredAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAmountToCashBill(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountToPayBill(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getNumberOfBills(overrides?: CallOverrides): Promise<BigNumber>;

  getNumberOfDishonoredAddresses(overrides?: CallOverrides): Promise<BigNumber>;

  issueBill(
    _amount: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lockToken(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DISCOUNT_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    TERM(overrides?: CallOverrides): Promise<BigNumber>;

    allBills(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, number] & {
        id: BigNumber;
        amount: BigNumber;
        timestamp: BigNumber;
        issuer: string;
        recipient: string;
        status: number;
      }
    >;

    beforeDueDate(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cashBill(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    completeBill(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    dishonoredAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAmountToCashBill(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountToPayBill(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfBills(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfDishonoredAddresses(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueBill(
      _amount: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    lockToken(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    DISCOUNT_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    TERM(overrides?: CallOverrides): Promise<BigNumber>;

    allBills(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeDueDate(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cashBill(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeBill(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dishonoredAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountToCashBill(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountToPayBill(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfBills(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfDishonoredAddresses(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueBill(
      _amount: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lockToken(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DISCOUNT_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INTEREST_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TERM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allBills(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeDueDate(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cashBill(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeBill(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dishonoredAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountToCashBill(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountToPayBill(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumberOfBills(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumberOfDishonoredAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueBill(
      _amount: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lockToken(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
